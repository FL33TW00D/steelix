use crate::helpers::npy_as_tensor;
use ir::{ops::pool::AvgPool, IntoTensor, Tensor};
use ndarray::Array;

#[test]
fn avg_pooling() {
    let input = Tensor::arange::<f32>(vec![2, 2, 16, 16], 0., 1024., 1.);
    let pool = AvgPool {
        ceil_mode: Some(0),
        count_include_pad: Some(0),
        pads: vec![0, 0, 0, 0],
        strides: vec![1, 1],
        kernel_shape: vec![7, 7],
    };

    let output = pool.pool::<f32>(&input).unwrap().into_tensor();

    let desired: Vec<f32> = vec![
        51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 67.0, 68.0, 69.0, 70.0, 71.0,
        72.0, 73.0, 74.0, 75.0, 76.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0,
        99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 115.0, 116.0, 117.0,
        118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0,
        137.0, 138.0, 139.0, 140.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0,
        156.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 179.0, 180.0,
        181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 195.0, 196.0, 197.0, 198.0, 199.0,
        200.0, 201.0, 202.0, 203.0, 204.0, 307.0, 308.0, 309.0, 310.0, 311.0, 312.0, 313.0, 314.0,
        315.0, 316.0, 323.0, 324.0, 325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 332.0, 339.0,
        340.0, 341.0, 342.0, 343.0, 344.0, 345.0, 346.0, 347.0, 348.0, 355.0, 356.0, 357.0, 358.0,
        359.0, 360.0, 361.0, 362.0, 363.0, 364.0, 371.0, 372.0, 373.0, 374.0, 375.0, 376.0, 377.0,
        378.0, 379.0, 380.0, 387.0, 388.0, 389.0, 390.0, 391.0, 392.0, 393.0, 394.0, 395.0, 396.0,
        403.0, 404.0, 405.0, 406.0, 407.0, 408.0, 409.0, 410.0, 411.0, 412.0, 419.0, 420.0, 421.0,
        422.0, 423.0, 424.0, 425.0, 426.0, 427.0, 428.0, 435.0, 436.0, 437.0, 438.0, 439.0, 440.0,
        441.0, 442.0, 443.0, 444.0, 451.0, 452.0, 453.0, 454.0, 455.0, 456.0, 457.0, 458.0, 459.0,
        460.0, 563.0, 564.0, 565.0, 566.0, 567.0, 568.0, 569.0, 570.0, 571.0, 572.0, 579.0, 580.0,
        581.0, 582.0, 583.0, 584.0, 585.0, 586.0, 587.0, 588.0, 595.0, 596.0, 597.0, 598.0, 599.0,
        600.0, 601.0, 602.0, 603.0, 604.0, 611.0, 612.0, 613.0, 614.0, 615.0, 616.0, 617.0, 618.0,
        619.0, 620.0, 627.0, 628.0, 629.0, 630.0, 631.0, 632.0, 633.0, 634.0, 635.0, 636.0, 643.0,
        644.0, 645.0, 646.0, 647.0, 648.0, 649.0, 650.0, 651.0, 652.0, 659.0, 660.0, 661.0, 662.0,
        663.0, 664.0, 665.0, 666.0, 667.0, 668.0, 675.0, 676.0, 677.0, 678.0, 679.0, 680.0, 681.0,
        682.0, 683.0, 684.0, 691.0, 692.0, 693.0, 694.0, 695.0, 696.0, 697.0, 698.0, 699.0, 700.0,
        707.0, 708.0, 709.0, 710.0, 711.0, 712.0, 713.0, 714.0, 715.0, 716.0, 819.0, 820.0, 821.0,
        822.0, 823.0, 824.0, 825.0, 826.0, 827.0, 828.0, 835.0, 836.0, 837.0, 838.0, 839.0, 840.0,
        841.0, 842.0, 843.0, 844.0, 851.0, 852.0, 853.0, 854.0, 855.0, 856.0, 857.0, 858.0, 859.0,
        860.0, 867.0, 868.0, 869.0, 870.0, 871.0, 872.0, 873.0, 874.0, 875.0, 876.0, 883.0, 884.0,
        885.0, 886.0, 887.0, 888.0, 889.0, 890.0, 891.0, 892.0, 899.0, 900.0, 901.0, 902.0, 903.0,
        904.0, 905.0, 906.0, 907.0, 908.0, 915.0, 916.0, 917.0, 918.0, 919.0, 920.0, 921.0, 922.0,
        923.0, 924.0, 931.0, 932.0, 933.0, 934.0, 935.0, 936.0, 937.0, 938.0, 939.0, 940.0, 947.0,
        948.0, 949.0, 950.0, 951.0, 952.0, 953.0, 954.0, 955.0, 956.0, 963.0, 964.0, 965.0, 966.0,
        967.0, 968.0, 969.0, 970.0, 971.0, 972.0,
    ];
    let expected_output: Tensor = Array::from_shape_vec((2, 2, 10, 10), desired)
        .unwrap()
        .into_tensor();

    assert!(output.all_close(&expected_output, 1e-2))
}

#[test]
fn avg_pooling_diff_n_and_c() {
    let input = Tensor::arange::<f32>(vec![3, 2, 8, 8], 0., 384., 1.);
    let pool = AvgPool {
        ceil_mode: Some(0),
        count_include_pad: Some(0),
        pads: vec![0, 0, 0, 0],
        strides: vec![1, 1],
        kernel_shape: vec![2, 2],
    };

    let output = pool.pool::<f32>(&input).unwrap().into_tensor();

    let desired: Vec<f32> = vec![
        4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 20.5, 21.5,
        22.5, 23.5, 24.5, 25.5, 26.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 36.5, 37.5, 38.5,
        39.5, 40.5, 41.5, 42.5, 44.5, 45.5, 46.5, 47.5, 48.5, 49.5, 50.5, 52.5, 53.5, 54.5, 55.5,
        56.5, 57.5, 58.5, 68.5, 69.5, 70.5, 71.5, 72.5, 73.5, 74.5, 76.5, 77.5, 78.5, 79.5, 80.5,
        81.5, 82.5, 84.5, 85.5, 86.5, 87.5, 88.5, 89.5, 90.5, 92.5, 93.5, 94.5, 95.5, 96.5, 97.5,
        98.5, 100.5, 101.5, 102.5, 103.5, 104.5, 105.5, 106.5, 108.5, 109.5, 110.5, 111.5, 112.5,
        113.5, 114.5, 116.5, 117.5, 118.5, 119.5, 120.5, 121.5, 122.5, 132.5, 133.5, 134.5, 135.5,
        136.5, 137.5, 138.5, 140.5, 141.5, 142.5, 143.5, 144.5, 145.5, 146.5, 148.5, 149.5, 150.5,
        151.5, 152.5, 153.5, 154.5, 156.5, 157.5, 158.5, 159.5, 160.5, 161.5, 162.5, 164.5, 165.5,
        166.5, 167.5, 168.5, 169.5, 170.5, 172.5, 173.5, 174.5, 175.5, 176.5, 177.5, 178.5, 180.5,
        181.5, 182.5, 183.5, 184.5, 185.5, 186.5, 196.5, 197.5, 198.5, 199.5, 200.5, 201.5, 202.5,
        204.5, 205.5, 206.5, 207.5, 208.5, 209.5, 210.5, 212.5, 213.5, 214.5, 215.5, 216.5, 217.5,
        218.5, 220.5, 221.5, 222.5, 223.5, 224.5, 225.5, 226.5, 228.5, 229.5, 230.5, 231.5, 232.5,
        233.5, 234.5, 236.5, 237.5, 238.5, 239.5, 240.5, 241.5, 242.5, 244.5, 245.5, 246.5, 247.5,
        248.5, 249.5, 250.5, 260.5, 261.5, 262.5, 263.5, 264.5, 265.5, 266.5, 268.5, 269.5, 270.5,
        271.5, 272.5, 273.5, 274.5, 276.5, 277.5, 278.5, 279.5, 280.5, 281.5, 282.5, 284.5, 285.5,
        286.5, 287.5, 288.5, 289.5, 290.5, 292.5, 293.5, 294.5, 295.5, 296.5, 297.5, 298.5, 300.5,
        301.5, 302.5, 303.5, 304.5, 305.5, 306.5, 308.5, 309.5, 310.5, 311.5, 312.5, 313.5, 314.5,
        324.5, 325.5, 326.5, 327.5, 328.5, 329.5, 330.5, 332.5, 333.5, 334.5, 335.5, 336.5, 337.5,
        338.5, 340.5, 341.5, 342.5, 343.5, 344.5, 345.5, 346.5, 348.5, 349.5, 350.5, 351.5, 352.5,
        353.5, 354.5, 356.5, 357.5, 358.5, 359.5, 360.5, 361.5, 362.5, 364.5, 365.5, 366.5, 367.5,
        368.5, 369.5, 370.5, 372.5, 373.5, 374.5, 375.5, 376.5, 377.5, 378.5,
    ];
    let expected_output: Tensor = Array::from_shape_vec((3, 2, 7, 7), desired)
        .unwrap()
        .into_tensor();

    assert!(output.all_close(&expected_output, 1e-2))
}

#[test]
fn pytorch_avgpool() {
    let steelix_input = npy_as_tensor(
        "models/eff-lite/avg_pool/avg_pool_input.npy",
        vec![1, 1280, 7, 7],
    );
    let pytorch_output = npy_as_tensor(
        "models/eff-lite/avg_pool/pytorch_eff_avg.npy",
        vec![1, 1280, 1, 1],
    );

    let pool = AvgPool {
        ceil_mode: Some(0),
        count_include_pad: Some(0),
        pads: vec![0, 0, 0, 0],
        strides: vec![1, 1],
        kernel_shape: vec![7, 7],
    };

    let output = pool.pool::<f32>(&steelix_input).unwrap().into_tensor();

    assert!(output.all_close(&pytorch_output, 1e-2))
}
