name: release 

env:
  MIN_SUPPORTED_RUST_VERSION: "1.51.0"
  CICD_INTERMEDIATES_DIR: "_cicd-intermediates"

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      slx_version: ${{ env.SLX_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.SLX_VERSION == ''
        run: |
          echo "SLX_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.SLX_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SLX_VERSION }}
          release_name: ${{ env.SLX_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-22.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-12
          rust: nightly
          target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup protoc
      uses: arduino/setup-protoc@v1.1.2

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"
    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/steelix"

    - name: Build archive
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        staging="steelix-${{ needs.create-release.outputs.slx_version }}-${{ matrix.target }}"
        mkdir -p "$staging"/{complete,doc}
        cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$staging/"
        cp {CHANGELOG.md,FAQ.md,GUIDE.md} "$staging/doc/"
        cp complete/_slx "$staging/complete/"
        cp "$outdir"/slx.1 "$staging/doc/"
        cp "target/${{ matrix.target }}/release/slx" "$staging/"
        tar czf "$staging.tar.gz" "$staging"
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

    - name: Publish archives and packages
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.ASSET }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

